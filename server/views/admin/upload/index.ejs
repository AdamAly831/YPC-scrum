<html>
  <head>
    <title>S3 Upload</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/2.1.4/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jqueryui/1.11.4/jquery-ui.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/blueimp-file-upload/9.5.7/jquery.fileupload.js"></script>
    <!-- <script src="./../upload.js"></script> -->
    <script>
    // Requires jQuery and blueimp's jQuery.fileUpload

    // client-side validation by fileUpload should match the policy
    // restrictions so that the checks fail early
    var acceptFileType = /.*/i;
    // var maxFileSize = 1000000;
    // The URL to your endpoint that maps to s3Credentials function
    var credentialsUrl = '/s3_credentials';
    // The URL to your endpoint to register the uploaded file
    var uploadUrl = '/upload';

    window.initS3FileUpload = function($fileInput) {
      $fileInput.fileupload({
        // acceptFileTypes: acceptFileType,
        // maxFileSize: maxFileSize,
        paramName: 'file',
        add: s3add,
        dataType: 'xml',
        done: onS3Done
      });
    };

    // This function retrieves s3 parameters from our server API and appends them
    // to the upload form.
    function s3add(e, data) {
      var filename = data.files[0].name;
      var contentType = data.files[0].type;
      var params = [];
      $.ajax({
        url: credentialsUrl,
        type: 'GET',
        dataType: 'json',
        data: {
          filename: filename,
          content_type: contentType
        },
        success: function(s3Data) {
          data.url = s3Data.endpoint_url;
          data.formData = s3Data.params;
          data.submit();
        }
      });
      return params;
    };

    function onS3Done(e, data) {
      var s3Url = $(data.jqXHR.responseXML).find('Location').text();
      var s3Key = $(data.jqXHR.responseXML).find('Key').text();
      var s3Size = data.originalFiles[0].size;
      var s3LastModified = data.originalFiles[0].lastModifiedDate;
      console.log("size is " + s3Size);
      console.log(s3LastModified);
      // Typically, after uploading a file to S3, you want to register that file with
      // your backend. Remember that we did not persist anything before the upload.
      // window.location.reload();
      $('<a/>').attr('href', s3Url).text('File uploaded at '+s3Url).appendTo($('body'));
      var HTMLtoAppend = '<tr>'+
      '<td>'+s3Key+'</td>'+
      '<td>'+s3Size+'</td>'+
      '<td>'+s3LastModified+'</td>'+
      '<td><a href="'+s3Url+'">'+
      '<button type="button" name="button">View File</button></a></td>'+
      '<td><form action="/upload/'+s3Key+'/destroy" method="post"><input type="submit" value="Delete File"></form></td></tr>';
      $(HTMLtoAppend).appendTo($('table'));
    };

    $(function() {
      initS3FileUpload($('#fileInput'));
    });
    </script>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
  </head>
  <body>
    <h1>S3 Upload</h1>
    <form>
      <input id="fileInput" type="file" name="file" />
    </form>
    <hr>
    <table>
      <tr>
        <th>File Name</th>
        <th>Size (kb)</th>
        <th>Last Modified</th>
        <th>Actions</th>
        <th></th>
      </tr>
      <% for (oneFile of allFiles) { %>
      <tr>
        <td><%= oneFile.Key %></td>
        <td><%= oneFile.Size %></td>
        <td><%= oneFile.LastModified %></td>
        <td><a href="https://<%= bucketName %>.s3.amazonaws.com/<%=oneFile.Key%>"><button type="button" name="button">View File</button></a></td>
        <td><form action="/upload/<%=oneFile.Key%>/destroy" method="post"><input type="submit" value="Delete File"></form></td>
      </tr>
      <% } %>
    </table>
    <hr>
  </body>
</html>
